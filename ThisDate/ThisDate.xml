<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThisDate</name>
    </assembly>
    <members>
        <member name="T:ThisDate.CalculatedEventsText">
            <summary>	Calculated events texts. </summary>
        </member>
        <member name="P:ThisDate.CalculatedEventsText.EasterSunday">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Easter Sunday text. </summary>
            
             <value>	The Easter Sunday text. This will never be null. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalculatedEventsText.GoodFriday">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Good Friday text. </summary>
            
             <value>	The Good Friday text. This will never be null. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime">
            <summary>	Abstract classes. </summary>
            <summary>	A calendar date time. </summary>
            <summary>	A calendar date time. </summary>
            <summary>	Yearly, monthly, weekly Calendar, Date, and Time extensions. </summary>
            <summary>	Common error messages. </summary>
            <summary>	A calendar date time. </summary>
            <summary>	Mainly private tools. </summary>
            <summary>	Internal types. </summary>
        </member>
        <member name="T:ThisDate.CalendarDateTime.DateTimeRange">
            -------------------------------------------------------------------------------------------------
             <summary>	A date time range. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DayOffWorkDay"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.DateTimeRange._dateEnd">
            <summary>	The date end Date/Time. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.DateTimeRange._dateStart">
            <summary>	The date start Date/Time. </summary>
        </member>
        <member name="P:ThisDate.CalendarDateTime.DateTimeRange.DateEnd">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets or sets the Date/Time of the date end. </summary>
            
             <value>	The date end. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.DateTimeRange.DateStart">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets or sets the Date/Time of the date start. </summary>
            
             <value>	The date start. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime.DayOffWorkDay">
            <summary>	A day off work day. </summary>
        </member>
        <member name="P:ThisDate.CalendarDateTime.DayOffWorkDay.DayOff">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets or sets a value indicating whether is a day off. </summary>
            
             <value>	True if day off, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.DayOffWorkDay.WorkDay">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the work day. </summary>
            
             <value>	True if work day, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.DateEventsDictionary">
            <summary>	Dictionary of date events. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.MonthlyEventsDictionary">
            <summary>	Dictionary of monthly events. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.WeeklyEventsDictionary">
            <summary>	Dictionary of weekly events. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyEventsDictionary">
            <summary>	Dictionary of yearly events. </summary>
        </member>
        <member name="P:ThisDate.CalendarDateTime.CountDateEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the total number of date events. </summary>
            
             <value>	The total number of date events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.CountEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the total number of events. </summary>
            
             <value>	The total number of events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.CountMonthlyEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the total number of monthly events. </summary>
            
             <value>	The total number of monthly events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.CountWeeklyEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the total number of weekly events. </summary>
            
             <value>	The total number of weekly events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.CountYearlyEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the total number of yearly events. </summary>
            
             <value>	The total number of yearly events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.KeysDateEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the keys date events. </summary>
            
             <value>	The keys date events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.KeysEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the keys events. </summary>
            
             <value>	The keys events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.KeysMonthlyEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the keys monthly events. </summary>
            
             <value>	The keys monthly events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.KeysWeeklyEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the keys weekly events. </summary>
            
             <value>	The keys weekly events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.KeysYearlyEvents">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the keys yearly events. </summary>
            
             <value>	The keys yearly events. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.ClearCalendar">
            <summary>	Clears the event calendar. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.ContainsEventKey(System.String)">
            -------------------------------------------------------------------------------------------------
             <summary>	Query if 'eventName' contains event key. </summary>
            
             <param name="eventName">	Name of the event. This may be null. </param>
            
             <returns>	True if it succeeds, false if it fails. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.EventDatesBetween(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Extension method that gets event dates between date ranges. </summary>
            
             <param name="eventName">	Name of the event. </param>
             <param name="date1">		(Optional) The first date, DateTime.MinValue if null. </param>
             <param name="date2">		(Optional) The second date, DateTime.MaxValue if null. </param>
            
             <returns>	An ImmutableArray&lt;DateTime&gt; </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.EventDatesBetween(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            -------------------------------------------------------------------------------------------------
             <summary>	Extension method that gets event dates between date ranges. </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown if either year1 or year2 are out of DateTime year min or max.
             </exception>
            
             <param name="eventName">	Name of the event. This may be null. </param>
             <param name="year1">		(optional) The first year, DateTime.MinValue.Year if null. </param>
             <param name="year2">		(optional) The second year, DateTime.MaxValue.Year if null. </param>
            
             <returns>	An ImmutableArray&lt;DateTime&gt; </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.RemoveEvent(System.String)">
            -------------------------------------------------------------------------------------------------
             <summary>	Removes the event described by eventName. </summary>
            
             <param name="eventName">	Name of the event. This may be null. </param>
            
             <returns>	True if it succeeds, false if it fails. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddDateEvent(System.String,System.Boolean,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds an explicit single date event. </summary>
            
             <remarks>	Adds an explicit single date such as July 18th, 2018 to the calendar. </remarks>
            
             <exception cref="T:System.ArgumentNullException">	Thrown when eventName is null or empty. </exception>
             <exception cref="T:System.ArgumentException">		Thrown when eventName is not unique. </exception>
            
             <param name="eventName">	Name of the event, must be unique. </param>
             <param name="dayOff">   	True if is a day off (is a workday). </param>
             <param name="date">			The date Date. </param>
            
             <example>
             	<code>
             	CalendarDateTime.AddDateEvent("Party Day", true, new DateTime(2018, 18, 5);
             	// Sets July 18, 2018 as a day off.
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddMonthlyDateEvent(System.String,System.Boolean,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a monthly date event. </summary>
            
             <remarks>
             	Adds a recurring monthly day of each month. Example: The 8th of each month.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             	Thrown when eventName is null or empty.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate > endDate.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when month day is out of range, assumes [1...31] range for unknown month.
             </exception>
            
             <param name="eventName">	Name of the event, must be unique. </param>
             <param name="dayOff">   	True if is a day off (is a workday). </param>
             <param name="monthDay">
             	The month day, assumes [1...31] range. Caution, 29, 30, and 31 days may be problematic.
             </param>
             <param name="startDate">	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">  	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	var start = new DateTime(2018, 2, 1);
             	// Electric bill due, starts Feb 1, 2018 and never ends.
             	CalendarDateTime.AddMonthlyDateEvent("Electric Bill Due", false, 8, start);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddMonthlyDayOfWeekForwardEvent(System.String,System.Boolean,System.DayOfWeek,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a monthly day of week forward (from start of month) event. </summary>
            
             <remarks>
             	Add a monthly repeating n-week, day-of-week event, counting from the start of the month.
             	Example: A meeting that occurs on the second Tuesday of every month.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             	Thrown when eventName is null or empty.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate > endDate.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when weeksForward is less han 1.
             </exception>
            
             <param name="eventName">   	Name of the event, must be unique. </param>
             <param name="dayOff">	   	True if is a day off (is a workday). </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="weeksForward">	Weeks forward from the start of the month. </param>
             <param name="startDate">   	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">	   	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	CalendarDateTime.AddMonthlyDayOfWeekForwardEvent("Monthly Second Tuesday", false, DayOfWeek.Tuesday, 2);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddMonthlyDayOfWeekReverseEvent(System.String,System.Boolean,System.DayOfWeek,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a monthly day of week reverse (from end of month) event. </summary>
            
             <remarks>
             	Add a monthly Day-of-Week, n-weeks reverse from the end of the month. Example, The last
             	Monday of each month. Memorial day (US) follows this pattern (it's not always the 4th
             	Monday of May).
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             	Thrown when eventName is null or empty.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate > endDate.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when weeksForward is less han 1.
             </exception>
            
             <param name="eventName">   	Name of the event, must be unique. </param>
             <param name="dayOff">	   	True if is a day off (is a workday). </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="weeksReverse">	Weeks reverse from the end of the month. </param>
             <param name="startDate">   	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">	   	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	CalendarDateTime.AddMonthlyDayOfWeekReverseEvent("Last Monday Every Month", false, DateTime.Tuesday, 1)
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddMonthlyLastDayEvent(System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a monthly last day event. </summary>
            
             <remarks>
             	Add a monthly last day of the month. Typically the 30, or 31 of the month 28 or 29 in
             	February.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">	Thrown when eventName is null or empty. </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate >
             	endDate.
             </exception>
            
             <param name="eventName">	Name of the event, must be unique. </param>
             <param name="dayOff">   	True if is a day off (is a workday). </param>
             <param name="startDate">	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">  	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	CalendarDateTime.AddMonthlyLastDayEvent("Last date of every month", false);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddWeeklyEvent(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.DayOfWeek},System.Nullable{System.DateTime},System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
             -------------------------------------------------------------------------------------------------
              <summary>	Adds a weekly event. </summary>
            
              <remarks>
              	Add a weekly day-of-week events, can occur on multiple days of the week and at some skip
              	interval. The baseDate is the date of the interval. Paydays typically follow this
              	pattern. The number of occurrences may vary from month to month because some months are 4
              	weeks, some are 5 weeks. Another example; a meeting every two weeks on Tuesdays and
              	Thursday within a date range.
              </remarks>
            
              <exception cref="T:System.ArgumentNullException">
              	Thrown when eventName is null or empty.
              </exception>
              <exception cref="T:System.ArgumentException">
              	Thrown when eventName is not unique or startDate > endDate.
              </exception>
              <exception cref="T:System.ArgumentOutOfRangeException">
              	Thrown when interval is less than one.
              </exception>
             <param name="eventName"> 	Name of the event, must be unique. </param>
             <param name="dayOff">	 	True if is a day off (is a workday). </param>
             <param name="daysOfWeek">	The days of week. This may be null. </param>
             <param name="seedWeek">
                 (Optional) (Optional if interval = 1) Seed date in the week of an occurrence.
             </param>
             <param name="interval">
                 (Optional) The week skip interval, 1=every week, 2 = every 2 weeks, 3 = 3 weeks...
             </param>
             <param name="startDate"> 	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">   	(Optional) The date end, DateTime.MaxValue if null. </param>
             -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddWeeklyInMonthEvent(System.String,System.Boolean,System.DayOfWeek,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a weekly in month event. </summary>
            
             <remarks>
             	Adds weekly day-of-week events, can occur on multiple days of the week and at some
             	interval by week. If the interval is null, all weeks [1...5.] are added, the 5th week
             	does not occur every month. Its possible to set an odd pattern such as 1rst, 2nd week of
             	every month.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             	Thrown when eventName is null or empty.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate > endDate.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when interval is less than 1 or greater than 5.
             </exception>
            
             <param name="eventName">	Name of the event, must be unique. </param>
             <param name="dayOff">   	True if is a day off (is a workday). </param>
             <param name="dayOfWeek">	The day of week. </param>
             <param name="weekIntervals">	(Optional) The weekly intervals, If null every week, 1: 1 first week, 2: second week, 3: third week... Not every month will have a fifth week. </param>
             <param name="startDate">	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">  	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	// Mondays, first and third week.
             	var weekIntervals = new int[] {1, 3};
             	CalendarDateTime.AddWeeklyInMonthEvent("Backups", false, DayOfWeek.Monday, weekIntervals);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddYearlyCalculatedEvent(System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a yearly calculated event. </summary>
            
             <remarks>
             	Selects events what are mathematically derived, Easter Sunday and Good Friday.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">	Thrown when eventName is null or empty. </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not either "EasterSunday" or "GoodFriday" or startDate >
             	endDate.
             </exception>
            
             <param name="eventName">	Name of the event, must be unique. </param>
             <param name="dayOff">   	True if is a day off (is a workday). </param>
             <param name="startDate">	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">  	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	// Note: Properties ending in "Text" (CalculatedEventsText.EasterSunday) are provided as convenience and to improve robustness.
             	CalendarDateTime.AddYearlyCalculatedEvent(CalculatedEventsText.EasterSunday, true);
             	CalendarDateTime.AddYearlyCalculatedEvent(CalculatedEventsText.GoodFriday, true);
             	// Test:
             	var easterDate2018 = new DateTime(2018, 4, 1);
             	var result = easterDate2018.EventsOnDate(false, true);
             	// [0] = "Easter Sunday"
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddYearlyDateEvent(System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a yearly date event. </summary>
            
             <remarks>
             	Selects yearly event on certain day of the month. If true, saturdayBack will shift
             	celebration to Friday. If true, sundayForward will shift the celebration forward. New
             	Years day is often shifted around the weekends.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             	Thrown when eventName is null or empty.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate > endDate.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when month is out of range [1...12] or when day is out of range for the given
             	month.
             </exception>
            
             <param name="eventName">		Name of the event, must be unique. </param>
             <param name="dayOff">			True if is a day off (is a workday). </param>
             <param name="month">			The month. </param>
             <param name="day">				The day. </param>
             <param name="saturdayBack"> 	True to shift back to Friday if on Saturday. </param>
             <param name="sundayForward">	True to shift forward to Monday if on Sunday. </param>
             <param name="startDate">		(Optional) The start date. </param>
             <param name="endDate">			(Optional) The end date. </param>
            
             <example>
             	<code>
             	// New Year's day, Jan 1, if on Saturday do not shift, if on Sunday then celebrate on Monday.
             	CalendarDateTime("New Years Day", true, 1, 1, false, true);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddYearlyDayOfWeekForwardEvent(System.String,System.Boolean,System.Int32,System.Int32,System.DayOfWeek,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a yearly day of week forward event. </summary>
            
             <remarks>
             	Selects events yearly events that occur on a certain day of the week going forward from
             	the start of the month. Example: Martin Luther King day occurs on the second Monday in
             	January.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             	Thrown when eventName is null or empty.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate > endDate.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when month is out of range [1...12] or when day is out of range for the given
             	month.
             </exception>
            
             <param name="eventName">   	Name of the event, must be unique. </param>
             <param name="dayOff">	   	True if is a day off (is a workday). </param>
             <param name="month">	   	The month. </param>
             <param name="weeksForward">	Weeks forward from the start of the month. </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="startDate">   	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">	   	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	// Thanksgiving is on the 4th Thursday (US) in November.
             	CalendarDateTime.AddYearlyDayOfWeekForwardEvent("Thanksgiving", true, 11, 4);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddYearlyDayOfWeekReverseEvent(System.String,System.Boolean,System.Int32,System.Int32,System.DayOfWeek,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Adds a yearly day of week reverse event. </summary>
            
             <remarks>
             	Selects events yearly events that occur on a certain day of the week, and week going
             	reverse from the end of the month. Example: Memorial day is on the last Monday of May.
             </remarks>
            
             <exception cref="T:System.ArgumentNullException">
             	Thrown when eventName is null or empty.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when eventName is not unique or startDate > endDate.
             </exception>
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when month is out of range [1...12] or when day is out of range for the given
             	month.
             </exception>
            
             <param name="eventName">   	Name of the event, must be unique. </param>
             <param name="dayOff">	   	True if is a day off (is a workday). </param>
             <param name="month">	   	The month. </param>
             <param name="weeksReverse">	Weeks reverse from the end of the month. </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="startDate">   	(Optional) The date start, DateTime.MinValue if null. </param>
             <param name="endDate">	   	(Optional) The date end, DateTime.MaxValue if null. </param>
            
             <example>
             	<code>
             	// Labor Day is the last Monday in May (US), usually the 4 week but not always.
             	CalendarDateTime.AddYearlyDayOfWeekReverseEvent("Labor Day", true, 1, DayOfWeek.Monday);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.AddWorkdays(System.DateTime,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	DateTime extension method that calculates (+/-) n-workdays from date. Workdays are
             	defined by the calendar configuration.
             </summary>
            
             <remarks>
             	Workdays are defined by calendar 'Add-' configuration methods, isWorkday define what days
             	are skipped.
             </remarks>
            
             <param name="date">	The date. </param>
             <param name="days">	Workdays to +add / -subtract. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	// 30 work days forward, skipping non-workdays in the calendar.
             	var someDate = aDate.AddWorkdays(30);
            
             	// 30 work days back, skipping non-workdays in the calendar.
             	var backDate = aDate.AddWorkdays(-30);
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.DateId(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	date as "yyyyMMdd", typically used as dateId key on date dimension tables. </summary>
            
             <remarks>	2018/1/1 (1/1/2018) => 20180101. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	An int representing a date as yyyyMMdd. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 5, 8);
             	var result = aDate.DateId();
             	// result = 20180508
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.DayOfWeekCountInMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	DateTime extension method returns the day-of-week count in month. Example: Feb 12, 2019
             	is the second Tuesday of the month.
             </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	An int. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 5, 8);
             	var result = aDate.DayOfWeekCountInMonth();
             	// result = 2
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.DayOfWeekCountInYear(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	DateTime extension method returns week count of the year. </summary>
            
             <remarks>
             	Example: Feb 4, 2019 is 5 Mondays into the year and Feb 5, 2019 is 6 Tuesdays into the
             	year.
             </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	An int. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2019, 2, 5);
             	var result = aDate.DayOfWeekCountInYear();
             	// result = 6
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.DayOfWeekMonthForward(System.Int32,System.Int32,System.DayOfWeek,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Returns the n-th Day-of-week from the start of the month going forward. </summary>
            
             <remarks>
             	Use this method to return a day-of-week date count into the month. Example, 2th Tuesday
             	of 2018 is February 13, 2018.
             </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when DateTime.Year is out of bounds and if Month is out of bounds.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when weeksForwards is less than 1.
             </exception>
            
             <param name="year">		   	The year. </param>
             <param name="month">	   	The month. </param>
             <param name="dayOfWeek">   	The day-of-week. </param>
             <param name="weeksForward">	The weeks forward. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var result = CalendarDateTime.DayOfWeekMonthForward(2018, 2, DayOfWeek.Tuesday, 2);
             	// result = {2/13/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.DayOfWeekMonthReverse(System.Int32,System.Int32,System.DayOfWeek,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Returns the nth Day-of-week from the end of the month going reverse. </summary>
            
             <remarks>
             	Use this method to return a day-of-week date count from the end of the month. Example,
             	2th February Tuesday from the end of the month in 2018, is February 20, 2018.
             </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when DateTime.Year is out of bounds and if Month is out of bounds.
             </exception>
             <exception cref="T:System.ArgumentException">
             	Thrown when weeksForwards is less than 1.
             </exception>
            
             <param name="year">		   	The year. </param>
             <param name="month">	   	The month. </param>
             <param name="dayOfWeek">   	The day-of-week. </param>
             <param name="weeksReverse">	The weeks forward. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var result = CalendarDateTime.DayOfWeekMonthReverse(2018, 2, DayOfWeek.Tuesday, 2);
             	// result = {2/20/2018 12:00:00 AM} </code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.DayOfWeekShift(System.DateTime,System.DayOfWeek)">
            -------------------------------------------------------------------------------------------------
             <summary>	Shift to target day-of-week from date within the week. </summary>
            
             <remarks>	Target day-of-week is always in the same week of the date. </remarks>
            
             <param name="date">  	The date. </param>
             <param name="target">	Target for day-of-week. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var date = new DateTime(2018, 5, 2);                        // date.DayOfWeek = Wednesday
            
             	var resultSun = date.DayOfWeekShift(DayOfWeek.Sunday);
             	// resultSun = {4/29/2018 12:00:00 AM}
            
             	var resultMon = date.DayOfWeekShift(DayOfWeek.Monday);
             	// resultMon = {4/30/2018 12:00:00 AM}
            
             	var resultTue = date.DayOfWeekShift(DayOfWeek.Tuesday);
             	// resultTue = {5/1/2018 12:00:00 AM}
            
             	var resultWed = date.DayOfWeekShift(DayOfWeek.Wednesday);
             	// resultWed = {5/2/2018 12:00:00 AM}
            
             	var resultThu = date.DayOfWeekShift(DayOfWeek.Thursday);
             	// resultThu = {5/3/2018 12:00:00 AM}
            
             	var resultFri = date.DayOfWeekShift(DayOfWeek.Friday);
             	// resultFri = {4/4/2018 12:00:00 AM}
            
             	var resultSat = date.DayOfWeekShift(DayOfWeek.Saturday);
             	// resultSat = {5/5/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.EventsOnDate(System.DateTime,System.Boolean,System.Boolean)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that returns list of events on date. </summary>
            
             <param name="date">			  	The date. </param>
             <param name="includeWorkdays">	True to include, false to include workday events. </param>
             <param name="includeDaysOff"> 	True to disable, false to include days off events. </param>
            
             <returns>	An ImmutableArray&lt;string&gt; </returns>
            
             <example>
             	<code>
             	CalendarDateTime.AddYearlyDateEvent("myBirthday", true, 5, 20, false, false);
             	var aDate = new DateTime(2018, 5, 20, 5, 30, 0);
             	var events = aDate.EventsOnDate(true, true);
             	// events = [0] = "myBirthday"
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsBetweenEqual(System.DateTime,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method returns true if date is between or equal date range.
             </summary>
            
             <remarks>	Order of date1 and date2 is unimportant. </remarks>
            
             <param name="date"> 	The date. </param>
             <param name="date1">	The date 1 Date/Time. </param>
             <param name="date2">	The date 2 Date/Time. </param>
            
             <returns>	True if between equal, false if not. </returns>
            
             <example>
             	<code>
             	var date1 = new DateTime(2012, 5, 4);
             	var date2 = new DateTime(2020, 4, 1);
             	var alpha = new DateTime(2018, 4, 4);
             	var result = alpha.IsBetweenEqual(date1, date2);
             	// true
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsDayOff(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method that query if 'date' is day off. The days off is configured
             	using the Add-calendar event methods.
             </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	True if day off, false if not. </returns>
            
             <example>
             	<code>
             	// LINQ example.
             	var starting = new DateTime(2018, 1, 1);
             	var ending = new DateTime(2018, 12, 31);
             	var allDates = Enumerable.Range(0, 1 + ending.Subtract(starting).Days).Select(i=&gt; starting.AddDays(i));
            
             	CalendarDateTime.AddYearlyDateEvent("theDate", true, 6, 10, false, false);
             	var result = allDates.Where(d =&gt; d.IsDayOff());
             	// result = [0] = {6/10/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsFirstDayOfMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that query if 'date' is first day of month. </summary>
            
             <remarks>
             	Simple method, returns true if the date is the 1rst of the month. Provided for
             	consistency.
             </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	True if first day of month, false if not. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 2, 1);
             	var result = aDate.IsFirstDaDayOfMonth();
             	// true
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsFirstWeekOfMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that query if 'date' is first week of month. </summary>
            
             <remarks>
             	The first week is the first week that ends on Saturday, not always a full week.
             </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	True if first week of month, false if not. </returns>
            
             <example>
             	<code>
             	var d = new DateTime(2018, 5, 29);
             	var result = d.IsLastWeekOfMonth();
             	// false
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsLastDayOfMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that query if 'date' is last day of month. </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	True if last day of month, false if not. </returns>
            
             <example>
             	<code>
             	var d = new DateTime(2018, 5, 31);
             	var result = d.IsLastDayOfMonth();
             	// true
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsLastWeekOfMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that query if 'date' is last week of month. </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	True if last week of month, false if not. </returns>
            
             <example>
             	<code>
             	var d = new DateTime(2018, 5, 29);
             	var result = d.IsLastWeekOfMonth();
             	// true
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsLeapYear(System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	An int extension method that query if 'year' is leap year. </summary>
            
             <param name="year">	The year. </param>
            
             <returns>	True if leap year, false if not. </returns>
            
             <example>
             	<code>
             	var result = CalendarDateTime.IsLeapYear(2018);
             	// false
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsLeapYear(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	An int extension method that query if 'year' is leap year. </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	True if leap year, false if not. </returns>
            
             <example>
             	<code>
             	var result = CalendarDateTime.IsLeapYear(new DateTime(2018, 5, 5));
             	// false
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsNthDayOfWeek(System.DateTime,System.Int32,System.DayOfWeek)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that query if 'date' is nth day-of-week. </summary>
            
             <remarks>	Example: true if the date is the 3rd Monday of the month. </remarks>
            
             <param name="date">		 	The date. </param>
             <param name="weekNumber">	The week number. </param>
             <param name="dayOfWeek"> 	The day-of-week. </param>
            
             <returns>	True if nth day of week, false if not. </returns>
            
             <example>
             	<code>
             	var d = new DateTime(2018, 5, 21);
             	var result = d.IsNthDayOfWeek(3, DayOfWeek.Monday);
             	// true
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsWeekDay(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method that query if 'date' is week day [Monday...Friday].
             </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	True if week day, false if not. </returns>
            
             <example>
             	<code>
             	var d = new DateTime(2018, 5, 21);
             	var result = d.IsWeekDay();
             	// true
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsWeekend(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method that query if 'date' is weekend, [Saturday...Sunday].
             </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	True if weekend, false if not. </returns>
            
             <example>
             	<code>
             	var d = new DateTime(2018, 5, 21);
             	var result = d.IsWeekDay();
             	// false
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IsWorkDay(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method that query if 'date' is work day. Workdays is configured by
             	calendar Add- event methods.
             </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	True if work day, false if not. </returns>
            
             <example>
             	<code>
             	// LINQ example.
             	var starting = new DateTime(2018, 1, 1);
             	var ending = new DateTime(2018, 12, 31);
             	var allDates = Enumerable.Range(0, 1 + ending.Subtract(starting).Days).Select(i=&gt; starting.AddDays(i));
            
             	CalendarDateTime.AddYearlyDateEvent("theDate", true, 6, 10, false, false);
             	var result = allDates.Where(d == d.IsWorkDay());
             	// result = lots, except {6/10/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.LastDateOfMonth(System.Int32,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Returns the last date of month. </summary>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when year is out of DateTime.MinValue/MaxValue year. Month is less than 1 or
             	greater than 12.
             </exception>
            
             <param name="year"> 	The year. </param>
             <param name="month">	The month. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var result = CalendarDateTime.LastDateOfMonth(2018, 5);
             	//	result = {5/31/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.LastDateOfMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Returns the last date of month. </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 5, 3);
             	var result = aDate.LastDateOfMonth();
             	//	result = {5/31/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.Quarter(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method returns the date quarter count, i.e. [1, 2, 3, 4].
             </summary>
            
             <param name="date">	The date. </param>
            
             <returns>	An int. </returns>
            
             <example>
             	<code>
             	var result = aDate.Quarter();
             	//	result = 2
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.QuarterLong(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method returns date quarter as 'Quarter n' where n is [1...4].
             </summary>
            
             <remarks>	Returns as ["Quarter 1", "Quarter 2", "Quarter 3", "Quarter 4"]. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A string. This will never be null. </returns>
            
             <example>
             	<code>
             	var result = aDate.Quarter();
             	//	result = Quarter 2
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.QuarterShort(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method returns date quarter as 'Qn' where n is [1...4].
             </summary>
            
             <remarks>	Returns as ["Q1", "Q2", "Q3", "Q4"]. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A string. This will never be null. </returns>
            
             <example>
             	<code>
             	var result = aDate.Quarter();
             	//	result = Q2
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.RoundToHour(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that rounds to hour. </summary>
            
             <remarks>	Returns 4:36:45.1575 PM as 5:00:00.000 PM. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 13, 36, 45);
             	var result = dateTime.RoundToHour();
             	//	result = {5/21/2018 2:00:00 PM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.RoundToInterval(System.DateTime,System.TimeSpan)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that rounds to TimeSpan interval./. </summary>
             <param name="date">	   	The date. </param>
             <param name="interval">	The interval. </param>
             <returns>	A DateTime. </returns>
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 23, 36, 47, 854);
             	
             	// Round to the day.
             	var timeSpan = new TimeSpan(1, 0, 0, 0);
             	
             	var result = dateTime.RoundToInterval(timeSpan);
             	//	result = {5/22/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.ToLastTick(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method returns the date to the last tick of the day. </summary>
             <param name="date">	The date. </param>
             <returns>	Date as a DateTime. </returns>
             <example>
             	<code>
             	var date = new DateTime(2019, 1, 10, 19, 36, 47, 20);
             	var endOfDay = date.ToLastTick();
             	// endOfDay = "2019/1/11 23:59:59.9999999"
             	
             	List&lt;DateTime&gt; dates = GetBunchOfDates();
             	var date = DateTime.Now;
             	var results = dates.Where(d =&gt; IsBetween(date.Date, date.ToLastTick());
             	// results = {all dates today)}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.RoundToMinute(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that rounds to minute. </summary>
            
             <remarks>	Returns 4:36:45.6575 PM as 4:36:46.000 PM. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 13, 36, 47, 854);
             	var result = dateTime.RoundToSecond();
             	//	result = {5/21/2018 1:36:48 PM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.RoundToSecond(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that rounds to second. </summary>
            
             <remarks>	Returns 4:36:45.857 PM as 16:36:46.000 PM. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 4, 12, 12, 30, 54, 825);
             	var result = aDate.RoundToSecond();
             	// result = {4/12/2018 12:30:55 PM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.TimeId(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method that time identifier in HHmmssfff format. Typically used as
             	Time key on tables.
             </summary>
            
             <remarks>	Returns 4:36:45.157 PM as 163645157. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A string. This will never be null. </returns>
            
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 23, 36, 47, 854);
             	var result = dateTime.TimeId();
             	//	result = "233647854"
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.TimeIdToHour(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that rounds time identifier to hour. </summary>
            
             <remarks>	Returns 4:36:45.1575 PM as 170000000. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A string. This will never be null. </returns>
            
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 10, 36, 47, 854);
             	var result = dateTime.TimeIdToHour();
             	//	result = "110000000"
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.TimeIdToInterval(System.DateTime,System.TimeSpan)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method that rounds time identifier to TimeSpan interval.
             </summary>
            
             <remarks>	Custom round off interval. </remarks>
            
             <param name="date">	   	The date. </param>
             <param name="interval">	The interval. </param>
            
             <returns>	A string. This will never be null. </returns>
            
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 10, 36, 47, 854);
            
             	// 10 millisecond round off.
             	var timeSpan = new TimeSpan(0, 0, 0, 0, 10);
            
             	var result = dateTime.TimeIdToInterval(timeSpan);
             	//	result = "103647850"
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.TimeIdToMinute(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that rounds time identifier to minute. </summary>
            
             <remarks>	Returns 4:36:45.6575 PM as 163700000. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A string. This will never be null. </returns>
            
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 10, 36, 47, 854);
             	var result = dateTime.TimeIdToMinute();
             	//	result = "103700000"
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.TimeIdToSecond(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that rounds time identifier to second. </summary>
            
             <remarks>	Returns 4:36:45.6575 PM as 163646000. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	A string. This will never be null. </returns>
            
             <example>
             	<code>
             	var dateTime = new DateTime(2018, 5, 21, 10, 36, 47, 854);
             	var result = dateTime.TimeIdToSecond();
             	//	result = "103648000"
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeekendAdjustDate(System.DateTime,System.Boolean,System.Boolean)">
            -------------------------------------------------------------------------------------------------
             <summary>
             	A DateTime extension method that adjusts the date back if on Saturday or forward if on
             	Sunday.
             </summary>
            
             <remarks>
             	Some events, such as New Years day is celebrated on Friday if on Saturday, or on Monday
             	if on Sunday for example.
             </remarks>
            
             <param name="date">			 	The date. </param>
             <param name="saturdaysBack"> 	True to adjust Saturday dates back to Friday. </param>
             <param name="sundaysForward">	True to adjust Sundays dates forward to Monday. </param>
            
             <returns>	A DateTime. </returns>
            
             <example>
             	<code>
             	var aSaturday = new DateTime(2018, 5, 19);
             	var aSunday = new DateTime(2018, 5, 20);
            
             	var back = aSaturday.WeekendAdjustDate(true, false);
             	// back = {5/18/2018 12:00:00 AM}
            
             	var forward = aSunday.WeekendAdjustDate(true, true);
             	// forward = {5/21/2018 12:00:00 AM}
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeekOfMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that returns the date week of the month. </summary>
            
             <param name="dateTime">	The dateTime to act on. </param>
            
             <returns>	An int. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 5, 8);
             	var result = aDate.WeekOfMonth();
             	// result = 2
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeekOfYear(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	A DateTime extension method that returns the date week of year. </summary>
            
             <param name="dateTime">	The dateTime to act on. </param>
            
             <returns>	An int. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 5, 8);
             	var result = aDate.WeekOfYear();
             	// result = 19
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeeksInMonth(System.Int32,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Returns the number of weeks in month./. </summary>
            
             <remarks>	From first of the month, to the last day of the month integer days / 7. </remarks>
            
             <exception cref="T:System.ArgumentOutOfRangeException">
             	Thrown when year exceeds DateTime.MinValue.Year/DateTime.MaxValue.Year, or Month is less
             	than 1 or greater than 12. the required range.
             </exception>
            
             <param name="year"> 	The year. </param>
             <param name="month">	The month. </param>
            
             <returns>	An int. </returns>
            
             <example>
             	<code>
             	var result = CalendarDateTime.WeeksInMonth(2018, 5);
             	// result = result = 4
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeeksInMonth(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Returns the number of weeks in month./. </summary>
            
             <remarks>	From first of the month, to the last day of the month integer days / 7. </remarks>
            
             <param name="date">	The date. </param>
            
             <returns>	An int. </returns>
            
             <example>
             	<code>
             	var aDate = new DateTime(2018, 5, 8);
             	var result = aDate.WeeksInMonth();
             	// result = 4
             	</code>
             </example>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.ErrorMessageCannotBeNullOrEmpty(System.String)">
            -------------------------------------------------------------------------------------------------
             <summary>	Error message days null or empty. </summary>
            
             <param name="parameterName">	Name of the parameter. This cannot be null. </param>
            
             <returns>	A string. This will never be null. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.ErrorMessageEasterSundayGoodFriday(System.String,System.String)">
            -------------------------------------------------------------------------------------------------
             <summary>	Error message easter sunday good friday. </summary>
            
             <param name="paramName">	Name of the parameter. This cannot be null. </param>
             <param name="value">		The value. </param>
            
             <returns>	A string. This will never be null. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.ErrorMessageKeyAlreadyAdded(System.String,System.String)">
            -------------------------------------------------------------------------------------------------
             <summary>	Error message key already added. </summary>
            
             <param name="paramName">	Name of the parameter. This cannot be null. </param>
             <param name="value">		The value. </param>
            
             <returns>	A string. This will never be null. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.ErrorMessageMinMaxOutOfRange(System.Int32,System.String,System.Int32,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Error message minimum maximum out of range. </summary>
            
             <param name="value">		The value. </param>
             <param name="paramName">	Name of the parameter. This cannot be null. </param>
             <param name="min">			The minimum. </param>
             <param name="max">			The maximum. </param>
            
             <returns>	A string. This will never be null. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.ErrorMessageZeroOrNegative(System.String,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Error message zero or negative. </summary>
            
             <param name="paraName">	Name of the para. This cannot be null. </param>
             <param name="value">   	The value. </param>
            
             <returns>	A string. This will never be null. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime.IDateEvent">
            <summary>	Interface for date event. </summary>
        </member>
        <member name="P:ThisDate.CalendarDateTime.IDateEvent.Date">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Date/Time of the date. </summary>
            
             <value>	The date. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IDateEvent.DayOff">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the day off. </summary>
            
             <value>	True if day off, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IDateEvent.WorkDay">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the work day. </summary>
            
             <value>	True if work day, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime.IMonthlyEvent">
            <summary>	Interface for monthly event. </summary>
        </member>
        <member name="P:ThisDate.CalendarDateTime.IMonthlyEvent.DateEnd">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Date/Time of the date end. </summary>
            
             <value>	The date end. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IMonthlyEvent.DateStart">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Date/Time of the date start. </summary>
            
             <value>	The date start. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IMonthlyEvent.DayOff">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the day off. </summary>
            
             <value>	True if day off, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IMonthlyEvent.WorkDay">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the work day. </summary>
            
             <value>	True if work day, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IMonthlyEvent.Date(System.Int32,System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Dates. </summary>
            
             <param name="year"> 	The year. </param>
             <param name="month">	The month. </param>
            
             <returns>	A DateTime? </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IMonthlyEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Event dates between date range (unsorted). </summary>
            
             <param name="dateFrom">	The date 1 Date/Time. </param>
             <param name="dateTo">	The date 2 Date/Time. </param>
            
             <returns>	A List&lt;DateTime&gt; </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime.IWeeklyEvent">
            <summary>	Interface for weekly event. </summary>
        </member>
        <member name="P:ThisDate.CalendarDateTime.IWeeklyEvent.DateEnd">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Date/Time of the date end. </summary>
            
             <value>	The date end. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IWeeklyEvent.DateStart">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Date/Time of the date start. </summary>
            
             <value>	The date start. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IWeeklyEvent.DayOff">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the day off. </summary>
            
             <value>	True if day off, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IWeeklyEvent.WorkDay">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the work day. </summary>
            
             <value>	True if work day, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IWeeklyEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Event dates between date range. </summary>
            
             <param name="dateFrom">	The date 1 Date/Time. </param>
             <param name="dateTo">	The date 2 Date/Time. </param>
            
             <returns>	A List&lt;DateTime&gt; </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IWeeklyEvent.IsEventDay(System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Query if 'date' is event day. </summary>
            
             <param name="date">	The date Date/Time. </param>
            
             <returns>	True if event day, false if not. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime.IYearlyEvent">
            <summary>	Interface for yearly event. </summary>
        </member>
        <member name="P:ThisDate.CalendarDateTime.IYearlyEvent.DateEnd">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Date/Time of the date end. </summary>
            
             <value>	The date end. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IYearlyEvent.DateStart">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the Date/Time of the date start. </summary>
            
             <value>	The date start. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IYearlyEvent.DayOff">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the day off. </summary>
            
             <value>	True if day off, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.IYearlyEvent.WorkDay">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets a value indicating whether the work day. </summary>
            
             <value>	True if work day, false if not. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IYearlyEvent.Date(System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Dates. </summary>
            
             <param name="year">	The year. </param>
            
             <returns>	A DateTime? </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.IYearlyEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Event dates between date range. </summary>
            
             <param name="dateFrom">	The date 1 Date/Time. </param>
             <param name="dateTo">	The date 2 Date/Time. </param>
            
             <returns>	A List&lt;DateTime&gt; </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.EasterSundayDate(System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Easter sunday date. </summary>
            
             <remarks>
             	Crazy calculation, same and variant solutions allover the internet. Copy/pasted this code
             	from https://www.codeproject.com/Articles/10860/WebControls/  and
             	https://stackoverflow.com/questions/2510383/how-can-i-calculate-what-date-good-friday-falls-on-given-a-year.
             </remarks>
            
             <param name="year">	The year. </param>
            
             <returns>	A DateTime. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.GoodFridayDate(System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Good friday date. </summary>
            
             <param name="year">	The year. </param>
            
             <returns>	A DateTime. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.MaxDaysInMonthEstimated(System.Int32)">
            -------------------------------------------------------------------------------------------------
             <summary>	Maximum days in month (estimated). Without the year this cannot be exact. </summary>
            
             <exception cref="T:System.ArgumentException">	Thrown when month is out of range. </exception>
            
             <param name="month">	The month. </param>
            
             <returns>	An int. </returns>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime.MinMaxSwapDate">
            <summary>	DateTime de-nullifies and min/max swapper. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.MinMaxSwapDate.Max">
            <summary>	Maximum DateTime. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.MinMaxSwapDate.Min">
            <summary>	Minimum DateTime. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MinMaxSwapDate.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            -------------------------------------------------------------------------------------------------
             <summary>	Min/Max DateTime swapper Constructor. </summary>
            
             <param name="minDateTime">	The minimum date, set to DateTime.MinValue if null. </param>
             <param name="maxDateTime">  The maximum date, set to DateTime.MaxValue if null. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="T:ThisDate.CalendarDateTime.DateEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	Date event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DayOffWorkDay"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IDateEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.DateEvent.#ctor(System.DateTime,System.Boolean)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="date">  	The date Date/Time. </param>
             <param name="dayOff">	True if dayOff (not workday). </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="P:ThisDate.CalendarDateTime.DateEvent.Date">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.MonthlyDayEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A monthly day event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IMonthlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.MonthlyDayEvent._day">
            <summary>	The day. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayEvent.#ctor(System.Boolean,System.Int32,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">   	True if is a day off (not workday). </param>
             <param name="day">			The day. </param>
             <param name="startDate">	The date start Date/Time. </param>
             <param name="endDate">  	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayEvent.Date(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.MonthlyDayOfWeekForwardEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A monthly day of week forward event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IMonthlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.MonthlyDayOfWeekForwardEvent._dayOfWeek">
            <summary>	The day of week. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.MonthlyDayOfWeekForwardEvent._weeksForward">
            <summary>	The weeks forward. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayOfWeekForwardEvent.#ctor(System.Boolean,System.DayOfWeek,System.Int32,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">	   	True if is a day off (not workday). </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="weeksForward">	The weeks forward. </param>
             <param name="startDate">   	The date start Date/Time. </param>
             <param name="endDate">	   	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayOfWeekForwardEvent.Date(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayOfWeekForwardEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.MonthlyDayOfWeekReverseEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A monthly day of week reverse event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IMonthlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.MonthlyDayOfWeekReverseEvent._dayOfWeek">
            <summary>	The day of week. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.MonthlyDayOfWeekReverseEvent._weeksReverse">
            <summary>	The weeks reverse. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayOfWeekReverseEvent.#ctor(System.Boolean,System.DayOfWeek,System.Int32,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">	   	True if is a day off (not workday). </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="weeksReverse">	The weeks reverse. </param>
             <param name="startDate">   	The date start Date/Time. </param>
             <param name="endDate">	   	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayOfWeekReverseEvent.Date(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyDayOfWeekReverseEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.MonthlyLastDayEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A monthly last day event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IMonthlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyLastDayEvent.#ctor(System.Boolean,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">   	True if is a day off (not workday). </param>
             <param name="startDate">	The date start Date/Time. </param>
             <param name="endDate">  	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyLastDayEvent.Date(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.MonthlyLastDayEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.WeeklyEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A weekly event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IWeeklyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.WeeklyEvent._daysOfWeek">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the days of week. </summary>
            
             <value>	The days of week. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.WeeklyEvent._interval">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the days of week. </summary>
             <summary>	The interval. </summary>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.WeeklyEvent._seedDate">
            <summary>	The seed date to base calculations on. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.WeeklyEvent._seedDayOfWeek">
            -------------------------------------------------------------------------------------------------
             <summary>
             	The seed day-of-week, Monday chosen because this is the earliest day-of-week to avoid
             	invalid dates.
             </summary>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeeklyEvent.#ctor(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{System.DayOfWeek},System.DateTime,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">	 	True if is a day off (not workday). </param>
             <param name="interval">  	The interval. </param>
             <param name="daysOfWeek">	The days of week. This cannot be null. </param>
             <param name="seedDate">  	A base date in the week of occurrence. </param>
             <param name="startDate"> 	The date start Date/Time. </param>
             <param name="endDate">   	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeeklyEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeeklyEvent.IsEventDay(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.WeeklyInMonthEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A weekly in month event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IWeeklyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.WeeklyInMonthEvent._dayOfWeek">
            <summary>	The day of week. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.WeeklyInMonthEvent._monthWeeks">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the month weeks. </summary>
            
             <value>	The month weeks. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeeklyInMonthEvent.#ctor(System.Boolean,System.DayOfWeek,System.Collections.Generic.IEnumerable{System.Int32},System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">	 	True if is a day off (not workday). </param>
             <param name="dayOfWeek"> 	The day of week. </param>
             <param name="monthWeeks">	The month in weeks. This cannot be null. </param>
             <param name="startDate"> 	The date start Date/Time. </param>
             <param name="endDate">   	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.WeeklyInMonthEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.YearlyCalculatedEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A yearly calculated event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IYearlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyCalculatedEvent._dateMethod">
            -------------------------------------------------------------------------------------------------
             <summary>	Gets the date method. </summary>
            
             <value>	The date method. </value>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyCalculatedEvent.#ctor(System.Boolean,System.Func{System.Int32,System.DateTime},System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">	 	True if is a day off (not workday). </param>
             <param name="dateMethod">	The date method. This cannot be null. </param>
             <param name="startDate"> 	The date start Date/Time. </param>
             <param name="endDate">   	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyCalculatedEvent.Date(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyCalculatedEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.YearlyDayOfWeekForwardEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A yearly day of week forward event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IYearlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyDayOfWeekForwardEvent._dayOfWeek">
            <summary>	The day of week. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyDayOfWeekForwardEvent._month">
            <summary>	The month. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyDayOfWeekForwardEvent._weeksForward">
            <summary>	The weeks forward. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyDayOfWeekForwardEvent.#ctor(System.Boolean,System.Int32,System.DayOfWeek,System.Int32,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">	   	True if is a day off (not workday). </param>
             <param name="month">	   	The month. </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="weeksForward">	The weeks forward. </param>
             <param name="startDate">   	The date start Date/Time. </param>
             <param name="endDate">	   	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyDayOfWeekForwardEvent.Date(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyDayOfWeekForwardEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.YearlyDayOfWeekReverseEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A yearly day of week reverse event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IYearlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyDayOfWeekReverseEvent._dayOfWeek">
            <summary>	The day of week. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyDayOfWeekReverseEvent._month">
            <summary>	The month. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyDayOfWeekReverseEvent._weekReverse">
            <summary>	The week reverse. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyDayOfWeekReverseEvent.#ctor(System.Boolean,System.Int32,System.DayOfWeek,System.Int32,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">	   	True if is a day off (not workday). </param>
             <param name="month">	   	The month. </param>
             <param name="dayOfWeek">   	The day of week. </param>
             <param name="weeksReverse">	The weeks reverse. </param>
             <param name="startDate">   	The date start Date/Time. </param>
             <param name="endDate">	   	The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyDayOfWeekReverseEvent.Date(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyDayOfWeekReverseEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:ThisDate.CalendarDateTime.YearlyMonthDatedEvent">
            -------------------------------------------------------------------------------------------------
             <summary>	A yearly month day event. </summary>
            
             <seealso cref="T:ThisDate.CalendarDateTime.DateTimeRange"/>
             <seealso cref="T:ThisDate.CalendarDateTime.IYearlyEvent"/>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyMonthDatedEvent._day">
            <summary>	The day. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyMonthDatedEvent._month">
            <summary>	The month. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyMonthDatedEvent._saturdayBack">
            <summary>	True to saturday back. </summary>
        </member>
        <member name="F:ThisDate.CalendarDateTime.YearlyMonthDatedEvent._sundayForward">
            <summary>	True to sunday forward. </summary>
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyMonthDatedEvent.#ctor(System.Boolean,System.Int32,System.Int32,System.Boolean,System.Boolean,System.DateTime,System.DateTime)">
            -------------------------------------------------------------------------------------------------
             <summary>	Constructor. </summary>
            
             <param name="dayOff">			True if is a day off (not workday). </param>
             <param name="month">			The month. </param>
             <param name="day">				The day. </param>
             <param name="saturdayBack"> 	True to saturday back. </param>
             <param name="sundayForward">	True to sunday forward. </param>
             <param name="startDate">		The date start Date/Time. </param>
             <param name="endDate">			The date end Date/Time. </param>
            -------------------------------------------------------------------------------------------------
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyMonthDatedEvent.Date(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ThisDate.CalendarDateTime.YearlyMonthDatedEvent.EventDatesBetween(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
    </members>
</doc>
